# Workflow to build and test wheels
name: Run tests

on: push

jobs:

  test_skimage_linux:
    name: Run tests linux-cp${{ matrix.python-version }}
    runs-on: ubuntu-latest
    env: 
        BUILD_DOCS: 1
        TEST_EXAMPLES: 0

    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8]
        include:
          - platform_id: manylinux_x86_64
            python-version: 3.7
            MINIMUM_REQUIREMENTS: 1
          - platform_id: manylinux_x86_64
            python-version: 3.7
            PIP_FLAGS: "--pre"
        

        
    steps:
      - name: Checkout scikit-image
        uses: actions/checkout@v1

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version}}

      - name: Build package
        env: 
            VERSION: ${{ matrix.python-version}} 
        run: |
            set -ex
            source tools/github/before_install.sh
            python setup.py sdist
            pip install -vv --no-build-isolation -e .;

      - name: Run tests
        run: |
            pip install $PIP_FLAGS -r requirements/test.txt
            export MPL_DIR=`python -c 'import matplotlib; print(matplotlib.get_configdir())'`
            mkdir -p ${MPL_DIR}
            touch ${MPL_DIR}/matplotlibrc
            pip install -r ./requirements/optional.txt
            pip install -r ./requirements/extras.txt
            source tools/github/script.sh



  test_skimage_macos:
    name: Run tests macos-cp${{ matrix.python-version }}
    runs-on: macos-latest

    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8]
        include:
          - os: macos-latest
            platform_id: macosx_x86_64
        
    env:
        BUILD_DOCS: 1
        TEST_EXAMPLES: 0
        CC: /usr/bin/clang
        CXX: /usr/bin/clang++
        CPPFLAGS: "-Xpreprocessor -fopenmp"
        CFLAGS: "-Wno-implicit-function-declaration -I/usr/local/opt/libomp/include"
        CXXFLAGS: "-I/usr/local/opt/libomp/include"
        LDFLAGS: "-Wl,-rpath,/usr/local/opt/libomp/lib -L/usr/local/opt/libomp/lib -lomp"

    steps:
      - name: Checkout scikit-image
        uses: actions/checkout@v1

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version}}

      - name: OSX configuration
        run: |
            # OpenMP is not present on macOS by default
            set -ex
            brew install libomp
            #export CC=/usr/bin/clang
            #export CXX=/usr/bin/clang++
            #export CPPFLAGS="$CPPFLAGS -Xpreprocessor -fopenmp"
            #export CFLAGS="$CFLAGS -Wno-implicit-function-declaration -I/usr/local/opt/libomp/include"
            #export CXXFLAGS="$CXXFLAGS -I/usr/local/opt/libomp/include"
            #export LDFLAGS="$LDFLAGS -Wl,-rpath,/usr/local/opt/libomp/lib -L/usr/local/opt/libomp/lib -lomp"
            #brew install ccache
            #export PATH=/usr/local/opt/ccache/libexec:$PATH
            #export CCACHE_CPP2=1

      - name: Build package
        run: |
            set -ex
            printenv
            source tools/github/before_install.sh
            printenv
            python setup.py sdist
            pip install -vv --no-build-isolation -e .;

      - name: Run tests
        run: |
            pip install $PIP_FLAGS -r requirements/test.txt
            export MPL_DIR=`python -c 'import matplotlib; print(matplotlib.get_configdir())'`
            mkdir -p ${MPL_DIR}
            touch ${MPL_DIR}/matplotlibrc
            pip install -r ./requirements/optional.txt
            pip install -r ./requirements/extras.txt
            source tools/github/script.sh



